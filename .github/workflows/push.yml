name: 'GitHub Actions'
'on':
    - push
concurrency: 'ci-${{ github.ref }}'
env:
    APP_IMAGE: keboola/gmail-extractor
    KBC_DEVELOPERPORTAL_VENDOR: keboola
    KBC_DEVELOPERPORTAL_APP: keboola.ex-gmail
    KBC_DEVELOPERPORTAL_USERNAME: keboola+gha_gmail_extractor
    KBC_DEVELOPERPORTAL_PASSWORD: '${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}'

    ENV_GMAIL_EXTRACTOR_APP_KEY: '${{ secrets.ENV_GMAIL_EXTRACTOR_APP_KEY }}'
    ENV_GMAIL_EXTRACTOR_APP_SECRET: '${{ secrets.ENV_GMAIL_EXTRACTOR_APP_SECRET }}'
    ENV_GMAIL_EXTRACTOR_ACCESS_TOKEN_JSON: '${{ secrets.ENV_GMAIL_EXTRACTOR_ACCESS_TOKEN_JSON }}'

    DOCKERHUB_USER: '${{ secrets.DOCKERHUB_USER }}'
    DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'
jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            app_image_tag: '${{ steps.tag.outputs.app_image_tag }}'
            is_semantic_tag: '${{ steps.tag.outputs.is_semantic_tag }}'
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v2
            -
                name: 'Print Docker version'
                run: 'docker -v'
            -
                name: 'Docker login'
                if: env.DOCKERHUB_TOKEN
                run: 'docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"'
            -
                name: 'Build image'
                run: 'docker build -t $APP_IMAGE .'
            -
                name: 'Set image tag'
                id: tag
                run: |
                    TAG="${GITHUB_REF##*/}"
                    IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
                    echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
                    echo "::set-output name=app_image_tag::$TAG"
                    echo "::set-output name=is_semantic_tag::$IS_SEMANTIC_TAG"
            -
                name: 'Push image to ECR'
                uses: keboola/action-push-to-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ steps.tag.outputs.app_image_tag }}'
                    push_latest: '${{ steps.tag.outputs.is_semantic_tag }}'
                    source_image: '${{ env.APP_IMAGE }}'
    tests:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v2
            -
                name: 'Pull image from ECR'
                uses: keboola/action-pull-from-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'
                    target_image: '${{ env.APP_IMAGE}}'
                    tag_as_latest: true
            -
                name: 'Run tests'
                run: |
                    docker run \
                    -e ENV_GMAIL_EXTRACTOR_APP_KEY \
                    -e ENV_GMAIL_EXTRACTOR_APP_SECRET \
                    -e ENV_GMAIL_EXTRACTOR_ACCESS_TOKEN_JSON \
                    ${{env.APP_IMAGE}} composer ci
    deploy:
        needs:
            - build
            - tests
        runs-on: ubuntu-latest
        if: 'startsWith(github.ref, ''refs/tags/'') && needs.build.outputs.is_semantic_tag == ''true'''
        steps:
            -
                name: 'Set tag in the Deloper Portal'
                uses: keboola/action-set-tag-developer-portal@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'
